import * as tree from '@zag-js/tree-view';
import { normalizeProps, useMachine } from 'zag-ripple';
import { track, trackSplit } from 'ripple';
import { File, Folder, ChevronRight } from 'lucide-ripple';

export component TreeView() {
	let service = useMachine(tree.machine, {
		id: 'tree-view',
		collection,
	});
	let api = track(() => tree.connect(service, normalizeProps));

	<div {...@api.getRootProps()}>
		<h3 {...@api.getLabelProps()}>{"My Documents"}</h3>
		<div data-scope="tree-view" data-part="controls">
			<button 
				data-scope="tree-view" 
				data-part="trigger"
				onClick={() => @api.collapse()}
			>
				{"Collapse All"}
			</button>
			<button 
				data-scope="tree-view" 
				data-part="trigger"
				onClick={() => @api.expand()}
			>
				{"Expand All"}
			</button>
		</div>
		<div {...@api.getTreeProps()}>
			if (collection.rootNode.children) {
				for (const node of collection.rootNode.children; index nodeIndex) {
					<TreeNode
						node={node}
						indexPath={[nodeIndex]}
						api={api}
					/>
				}
			}
		</div>
	</div>
}


const collection = tree.collection({
	nodeToValue: (node) => node.id,
	nodeToString: (node) => node.name,
	rootNode: {
		id: "ROOT",
		name: "",
		children: [
			{
				id: "node_modules",
				name: "node_modules",
				children: [
					{ id: "node_modules/zag-js", name: "zag-js" },
					{ id: "node_modules/zag-ripple", name: "zag-ripple" },
					{ id: "node_modules/ripple", name: "ripple" },
					{
						id: "node_modules/lucide-ripple",
						name: "lucide-ripple",
						children: [
							{ id: "node_modules/lucide-ripple/icons", name: "icons" },
							{ id: "node_modules/lucide-ripple/package.json", name: "package.json" },
						],
					},
				],
			},
			{
				id: "src",
				name: "src",
				children: [
					{ id: "src/App.ripple", name: "App.ripple" },
					{ id: "src/Layout.ripple", name: "Layout.ripple" },
					{
						id: "src/components",
						name: "components",
						children: [
							{ id: "src/components/Button.ripple", name: "Button.ripple" },
							{ id: "src/components/Card.ripple", name: "Card.ripple" },
						],
					},
					{ id: "src/index.ts", name: "index.ts" },
				],
			},
			{ id: "vite.config.js", name: "vite.config.js" },
			{ id: "package.json", name: "package.json" },
			{ id: "tsconfig.json", name: "tsconfig.json" },
			{ id: "README.md", name: "README.md" },
		],
	},
});


component TreeNode(props) {
    let [indexPath, node, api] = trackSplit(props, ['indexPath', 'node', 'api']);
	let nodeProps = track(() => ({ indexPath: @indexPath, node: @node }));
    let nodeState = track(() => @api.getNodeState(@nodeProps));

	if (@nodeState.isBranch) {
		<div {...@api.getBranchProps(@nodeProps)}>
			<div {...@api.getBranchControlProps(@nodeProps)}>
				<Folder size={16} />
				<span {...@api.getBranchTextProps(@nodeProps)}>{@node.name}</span>
				<span {...@api.getBranchIndicatorProps(@nodeProps)}>
					<ChevronRight size={16} />
				</span>
			</div>
			<div {...@api.getBranchContentProps(@nodeProps)}>
				<div {...@api.getBranchIndentGuideProps(@nodeProps)} />
				if (@node.children) {
					for (const childNode of @node.children; index childIndex) {
						let newIndexPath = [...@indexPath, childIndex];
						<TreeNode
							node={childNode}
							indexPath={newIndexPath}
							api={api}
						/>
					}
				}
			</div>
		</div>
	} else {
		<div {...@api.getItemProps(@nodeProps)}>
			<File size={16} />
			{@node.name}
		</div>
	}
}