import { isFunction } from "@zag-js/utils"
import { track, effect } from "ripple"

export function bindable(props) {
  const initial = props().defaultValue ?? props().value
  const eq = props().isEqual ?? Object.is

  const v = track(initial)
  const controlled = track(() => props().value !== undefined)
  const valueRef = track(@controlled ? props().value : @v)

  return {
    initial,
    ref: valueRef,
    get() {
      return (@controlled ? props().value : @v)
    },
    set(val){
      const prev = @controlled ? props().value : @v
      const next = isFunction(val) ? val(prev) : val
      if (props().debug) {
        console.log(`[bindable > ${props().debug}] setValue`, { next, prev })
      }
      
      if (!@controlled) @v = next
      
      if (!eq(next, prev)) {
        props().onChange?.(next, prev)
      }
    },
    invoke(nextValue, prevValue) {
      props().onChange?.(nextValue, prevValue)
    },
    hash(value) {
      return props().hash?.(value) ?? String(value)
    },
  }

}

bindable.cleanup = (fn: VoidFunction) => {
  effect(() => fn())
}

bindable.ref = (defaultValue: any) => {
  let value = defaultValue
  return {
    get: () => value,
    set: (next) => {
      value = next
    },
  }
}
